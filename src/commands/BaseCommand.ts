import { commands, window, workspace } from 'vscode'
import { platform } from 'process'
import { promisify } from 'util'
import { exec as baseExec } from 'child_process'
import { join } from 'path'
const exec = promisify(baseExec)

let outputChannel = window.createOutputChannel('AdonisJS')

export default class BaseCommand {
  /**
   * Show a message to the user
   */
  protected static async showMessage(message: string) {
    window.showInformationMessage(message)
  }

  /**
   * Show an error message to the user
   */
  protected static async showError(message: string, consoleErr: any = null) {
    if (consoleErr !== null) {
      message += ' (See output console for more details)'
      outputChannel.appendLine(consoleErr)
      outputChannel.show()
    }
    window.showErrorMessage(message)
    return false
  }

  /**
   * Prompt the user to select Yes or No
   */
  protected static async getYesNo(placeHolder: string): Promise<boolean> {
    let value = await window.showQuickPick(['Yes', 'No'], { placeHolder })
    return value?.toLowerCase() === 'yes' ? true : false
  }

  /**
   * Prompt the user for an input
   */
  protected static async getInput(placeHolder: string) {
    let name = await window.showInputBox({ placeHolder: placeHolder.replace(/\s\s+/g, ' ').trim() })
    name = name === undefined ? '' : name
    return name
  }

  /**
   * Prompt the user to select one or multiple input from a list
   */
  protected static async getListInput(
    placeHolder: string,
    list: string[],
    canPickMany: boolean = false
  ): Promise<string[]> {
    let name = (await window.showQuickPick(list, { placeHolder: placeHolder, canPickMany })) as
      | string[]
      | string
    return typeof name === 'string' ? [name] : name
  }

  /**
   * Open the given file in VSCode
   */
  protected static async openFile(filename: string) {
    try {
      let doc = await workspace.openTextDocument(join(this.getAcePath(), filename))
      window.showTextDocument(doc)
      commands.executeCommand('workbench.files.action.refreshFilesExplorer')
    } catch (e) {
      console.log(e)
    }
  }

  /**
   * Parse stdout after generating command using adonis/assembler and returns
   * the freshly created file
   */
  protected static parseCreatedFilename(stdout: string): string | null {
    const matches = stdout.match(/(?<=CREATE: )(.+)/)
    return matches ? matches[0] : null
  }

  /**
   * Open the new file generated by adonis/assembler in VSCode
   */
  protected static async openCreatedFile(stdout: string) {
    if (!stdout) return

    const filename = this.parseCreatedFilename(stdout)
    if (filename) {
      await this.openFile(filename)
    }
  }

  /**
   * Returns the path to ace location
   *
   * TODO: Support multi-workspaces ? Custom path config ?
   */
  protected static getAcePath(): string {
    return workspace.workspaceFolders![0].uri.path
  }

  /**
   * Execute the final `node ace x` command
   */
  protected static async execCmd(command: string, background: boolean = true) {
    let acePath = this.getAcePath()

    /**
     * If we are on windows, we need the remove the first slash
     */
    const isWindows = platform === 'win32'
    if (isWindows && acePath.startsWith('/')) {
      acePath = acePath.substring(1)
    }

    /**
     * Create the final command : cd {acePath} && node ace {cmd}
     */
    command = `node ace ${command}`
    let cmd =
      platform === 'win32' ? `cd /d "${acePath}" && ${command}` : `cd "${acePath}" && ${command}`

    /**
     * Execute the final command in the background
     */
    if (background) {
      return exec(cmd)
    }

    /**
     * Execute the final command in the foreground in the VSCode integrated terminal
     */
    let terminal = window.activeTerminal
    if (!terminal || terminal.name !== 'AdonisJS Ace') {
      terminal = window.createTerminal(`AdonisJS Ace`)
    }

    terminal.show()
    terminal.sendText(cmd)

    return
  }
}
